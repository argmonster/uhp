'uScript Hypertext Processor
'This function will process an HTML template giving uscript access to input variables
' and create dynamic page content with db/dst/dct lookups.
'-----------------------------------------------------------------------------------------
'Fake Version String:
'
' version 1.2.0 9/2/2011 Tim Markello
' Copyright 9/2/2011 Tim Markello timmarkello@gmail.com
'
'-----------------------------------------------------------------------------------------
'Edits:
'
' Tim 9/23/2011 1.2.0 *Minor Version Change*
' + Server Side tag attribute access.
'     See below for details on using this feature
' + enhanced DCT control for check and radio lists
' + enhanced <block> to allow array variables to be switches
' ~ changed <block> to not use system function $BLOCK() due to argument limitations
' + New Tags:
'  + <print />
'  + <snap />
'
'-----------------------------------------------------------------------------------------
'General Use Info:
'
' Due to the nature of the variable mapping this function MUST be an include file. Moving
'  this functionality to a library will break the variable mapping.
'
' This function uses the 'custom' attribute "uhp" to map the html values back to the
'  uScript variables. The uhp attribute value must match a variable name defined in the
'  main script that invokes this function or the value will be lost. Attribute to
'  variable mapping is NOT case sensitive. 
'   Example: 
'     Template attribute: ... uhp="client" ...
'     uScript: ... client is x ...
' 
' The HTML processing can parse attribute values wrapped with either a ' (single quote) 
'  or a " (double quote) BUT the closing wrapper MUST MATCH the open wrapper
'   Example: ... att='value' ... or ... att="value" ... *GOOD
'            ... att="value' ... or ... att='value" ... **NO GOOD!!
'
' Any HTML tag that is not supported by uhp will be sent to the browser for display AS IS.
'  This processor does not validate HTML other then the specific uhp tags.
'
'-----------------------------------------------------------------------------------------
'UHP Tags
'  
'  <BODY>
'     + creates the form to send to browser
'     Attributes:
'        Submitopt=<"on"/"off">
'           + optional
'           + adds the submit button to form or not
'           + defaults to "on"
'        SubmitLabel=<string>
'           + optional
'           + sets label of submit button to <string>
'           + defaults to 'SUBMIT'
'        CancelOpt=<"on"/"off">
'           + optional
'           + adds the cancel button to form or not
'           + defaults to "on"
'        CancelLabel=<string>
'           + optional
'           + sets label of cancel button to <string>
'           + defaults to 'CANCEL'
'        FormName=<string>
'           + optional
'           + sets formname to <string>
'           + defaults to user id + time of execution
'  <INPUT>
'     Attributes:
'        uhp=<string>
'           + required
'           + maps ui to uscript variable <string>
'        type=<"text"/"submit"/"checkbox"/"radio">
'           + required
'           + determins the input control behavor
'  <TEXTBLOCK>
'  <SELECT>
'     <OPTION>
'  <BLOCK>
'  <LITERAL>
'  <print />
'     Creates javascript print button on the form same as c_pbutton system include
'        but does not need c_cldef / c_clget includes
'     Attribures: None
'  <snap />
'     Creates cmhc snapshot, adding signature lines as configred in irms.
'     ***NOTE*** 
'        you must use inc_sysLibDef include in your mainscript for this tag to work.
'        Not using this inc will cause the script to crash if the template contains a
'        <snap> tag
'     **********
'     Attributes:
'        Title=<form title>
'           + title of the form - this is what will display in the irms viewer
'        Option=<snapshot option>
'           + 'option' argument to sn_CreateReport function. I'm not sure what the options are
'        parmfile=<snapshot Parmfile>
'           + 'parmfile' argument to sn_CreateReport function. I'm not suer what the parm options are
'        formid=<IRMSFormID>
'           + required
'           + form ID. must be a IRMS defined form. 
'           + ***NOTE*** UHP does not currently check to see if this is a valid IRMS form. an undefined
'              /invalid form id will display an error at the bottom of the form
'        regid=<RegisterID>
'           + register id to tie to the snapshot
'           + value of regid attribute can be a variable in the mainscript. The value of the variable
'              is used as the argument to the sn_CreateReport function. If a variable name matching
'              the value of the regid attribute is not found the actuall attribute value is passed
'              as the sn_CreateReport function.
'        dbnum='DB-Nbr'
'           + mis db number corrisponding with regid attribute.
'-----------------------------------------------------------------------------------------
' uScript / Server side access to template tag attributes
'  uhp allows uScript to access / change html tag attributes defined on the html template.
'     This is designed to allow the template attributes to dynamically changed based on
'     uScript logic.
'
'  To use this feature you must declare a variable using the following variable naming convention:
'     <variable name>.<attribute name>
'
'  The <variable name> must be the variable defined on the template tag with the 'uhp' 
'     attribute. For tags that are imbedded inside of other 'uhp' tags you will need to
'     include all of the variable names in the attribute prefix:
'        <outer var name>.<inner var name>.<att name>
'     This variable naming convention would be repeated for every level of tag embedding.
'
'  To change a template attribute use an assign statement to set the conventionally named
'     variable to the new attribute value before calling the uhp function.
'
'  To remove the value of the attribute without setting a new value in the uScript you must
'     set the uScript variable to "NULL" (myExmple.myAttribute = "NULL")
'
'  Example:
'     uScript:
'        start exampleScript()
'        uhpVar         is x
'        uhpVar.label   is x
'        uhpVar.label = "different from the template"
'        uhp("path/to/template")
'        end exampleScript
'     Template:
'        <html>
'           <body>
'              <input type='text' uhp='uhpVar' label='Set on Template' />
'           </body>
'        </html>
'
'  ***NOTE***
'     uScript limits the length of variable names to 16 characters - so plan accordingly
'     if you plan on using multiple layers of tag embedding and need to access the attributes.
'     (keep the var names short)
'
'-----------------------------------------------------------------------------------------
'Due to recursion limitations inherent with uScript this function uses subroutines to
' loop through the nested HTML tags in the template. Not pretty but it works.
'
'uhp recursion map
'
'start template file read
'  |
'  `-> Find HTML Tag <-.
'  |     |             |
'  |     `-> proc tag -'
'  |
'  `--> End of template file
'---------------------------
dynamic function uhp(uhp.path) is b
 'template file variables
uhp.path       is x     'path of the html template for processing
uhp.handle     is b
uhp.line       is x
 'uscript html control variables
varptr         is b
copyptr        is b
varlist[]      is x
control[,]     is x     'generic internal uhp variable for storing html control values
mapFlag[]      is x     'flags position of mainscript variables for mapping UI
idxptr         is b
formName       is x
 'template parsing variables
openTag        is x
openptr        is b
closeptr       is b
taglen         is b
tagtype        is x
tagatts        is x
tagptr         is b
tagend         is x     'character that ends the current tag: indicates if the tag is standalone (... />) or contains children (... >)
notag          is x     'not a uhp tag - sent to browser as is read from template
attName[]      is x
attValue[]     is x
inputMap       is x
inputType      is x
value[]        is x
label[]        is x
pbutton        is x
 'uhp recursion variables
parenttag[]    is x
parentAtt[]    is x
parentptr      is b
 'dst processing variables
dstinfo[]      is x
fakerecord     is h
fakedst        is v
 'misc/temp counters/strings 
i              is b
tempNum        is b
temp[]         is x
string         is x
loopcount      is b
looplimit      is b
'-----------------------------------
'MAIN:
'-----------------------------------
$clear(uhp.handle, uhp.line, varptr, control[], temp[], string)
'save off the loops variables
loopcount = $loopcount
looplimit = $looplimit
$loopcount = 0
$looplimit = 9999 'change to 0?
'open and process template
uhp.handle = $fileavail()
if $openfile(uhp.handle, uhp.path, "I") > 0 then
   uhp = 1
   return
endif
do while $readfile(uhp.handle, uhp.Line) = 0
   closeptr = 1
   gosub _TAGFIND
enddo
(void)$closefile(uhp.handle)
'map variables back to main script
gosub _MAP
'reset looplimits
$looplimit = looplimit
$loopcount = loopcount
'-------------------------------------
' return control back to main script
'-------------------------------------
return
'-------------------------------------
' Subroutines after this point
'-------------------------------------
' Find the next uhp tag to process
'-------------------------------------
_TAGFIND:
   openptr = $find("<", uhp.line, closeptr, "F")
   do while openptr = 0
      openptr = $len(uhp.line)
      if openptr > closeptr then
         i = openptr - closeptr + 1
         notag = $seg(uhp.line, closeptr, i)
         $ctag(notag)
      endif
      closeptr = 1
      if $readfile(uhp.handle, uhp.line) > 0 then
         uhp = 2
         return
      endif
      openptr = $find("<", uhp.line, closeptr, "F")
   enddo
   if openptr > closeptr then
      i = openptr - closeptr 
      notag = $seg(uhp.line, closeptr, i)
      $ctag(notag)
   endif
   $clear(opentag)
   do while openptr < $len(uhp.line)
      closeptr = $find(">", uhp.line, openptr, "F")
      do while closeptr = 0
         openTag += $seg(uhp.line, openptr)
         openptr = 1
         if $readfile(uhp.handle, uhp.Line) > 0 then
            uhp = 2
            return
         endif
         closePtr = $find(">", uhp.line, openptr, "F")
      enddo
      taglen = closeptr - openptr + 1
      openTag += $seg(uhp.line, openptr, taglen)
      gosub _TAGPROC
      if closeptr >= $len(uhp.line) then 
         'do nothing
      else
         closeptr++
         gosub _TAGFIND
      endif
      openptr = $len(uhp.line)
   enddo
goback


'-------------------------------------
' Process the uhp tag
'-------------------------------------
_TAGPROC:
   tagptr = 2
   tagType = $parse(opentag, tagptr, " >")
   tagAtts = $parse(opentag, tagptr, "/>")
   if $find("/", opentag, 1, "F") > 0 then
      tagend = "/"
   else
      tagend = ">"
   endif
   select $uc(tagtype)
      case "HTML"
        or "/HTML"      'do nothing
                        tagend = "/"
      case "HEAD"       'do nothing
        or "/HEAD"      'do nothing
                        tagend = "/"
      case "!--"        'do nothing
                        tagend = "/"
      case "BODY"       gosub _BODYTAG
                        tagend = "/"
      case "/BODY"      $sendform(formName)
                        tagend = "/"
      case "TEXTBLOCK"  gosub _TEXTBLOCK
      case "SELECT"     gosub _DROPBOX
      'case "/SELECT"    'close the tag
      case "OPTION"     gosub _DROPBOXOPT
      case "INPUT"      gosub _INPUT
      case "BLOCK"      gosub _BLOCK
      case "/BLOCK"     gosub _ENDBLOCK
      case "LITERAL"    gosub _LITERAL
      case "PRINT"      gosub _PBUTTON
      case "SNAP"       gosub _SNAPSHOT
      case other        $ctag(opentag)
                        tagend = "/"
   endselect
   'go find the child tags if there are some
   if tagEnd = ">" then
      parentTag[++parentptr] = tagtype
      parentAtt[parentptr] = tagAtts
      string = "/" + parentTag[parentptr]
      do while tagtype != string
         closePtr++
         gosub _TAGFIND
         string = "/" + parentTag[parentptr]
      enddo
      opentag = parentTag[parentptr]
      tagAtts = parentAtt[parentptr]
      (void)$arrRemove(parentTag[parentptr])
      (void)$arrRemove(parentAtt[parentptr])
      --parentptr
   endif

goback

'-------------------------------------
' the uhp input tag
'-------------------------------------
_INPUT:
   $clear(temp[])
   getAtts(tagatts, attName[], attValue[])
   inputtype = getAttVal("TYPE", attName[], attValue[], varlist[])
   inputMap = getAttVal("UHP", attName[], attValue[], varlist[])
   varptr = findVar(inputMap, varlist[])
   string = getAttVal("IDX", attName[], attValue[], varlist[])
   if varptr > 0 then
      mapflag[varptr] = "Y"
      copyptr = $varptr(temp[])
      (void)$copyvar(varptr, copyptr)
      if string dp then
         if $num(string) dp then
            idxPtr = $num(string)
         else
            idxPtr = $find(string, temp[], 1, "F")
            if idxPtr = 0 then
               idxPtr = $maxarray(temp[]) + 1
            endif
         endif
      else
         idxPtr = 0
      endif
      if idxPtr > 0 then
         control[varptr,idxPtr] = temp[idxPtr]
      else
         control[varptr] = temp[]
      endif
   endif
   $clear(temp[])
   select $uc(inputtype)
      case "TEXT"    temp[1] = getAttVal("LABEL", attName[], attValue[], varlist[])
                     if temp[1] dp then
                        $text(temp[1])
                     endif
                     temp[2] = getAttVal("EDIT", attName[], attValue[], varlist[])
                     $textbox(control[varptr, idxptr], temp[2])
      case "BLOCK"   $textblock(control[varptr, idxptr])
      case "SUBMIT"  temp[1] = getAttVal("VALUE", attName[], attValue[], varlist[])
                     $submit(control[varptr, idxptr], temp[1])
      case "RADIO"   
        or "CHECKBOX"   string = getAttVal("DCT", attName[], attValue[], varlist[])
                        if string dp then
                           $clear(value[], label[])
                           tempNum = $num(string)
                           (void)$dctload(tempNum, value[], label[])
                           'do we want a specific item?
                           string = getAttVal("CODE", attName[], attValue[], varlist[])
                           if string dp then
                              i = $find(string, value[], 1, "F")
                              tempNum = i + 1
                           else
                              i = 1
                              tempNum = $maxarray(value[]) + 1
                           endif
                           if idxptr !dp then
                              idxptr = i
                           endif
                        else
                           'defined on the template
                           value[1] = getAttVal("VALUE", attName[], attValue[], varlist[])
                           label[1] = getAttVal("LABEL", attName[], attValue[], varlist[])
                           i = 1
                           tempNum = 2
                        endif
                        do while i < tempNum
                           string = $uc(inputMap) + "-" + $uc(value[i]) + "-" + i
                           if inputtype = "RADIO" then
                              $radio(control[varptr,idxptr], label[i], value[i],,,string,string)
                           else
                              $checkbox(control[varptr,idxptr], label[i], value[i],,,string,string)
                              idxptr++
                           endif
                           i++
                        enddo
   endselect
goback

'-------------------------------------
' the uhp select/drop down list tag
'-------------------------------------
_DROPBOX:
   getAtts(tagatts, attName[], attValue[])
   inputMap = getAttVal("UHP", attName[], attValue[], varlist[])
   varptr = findVar(inputMap, varlist[])
   string = getAttVal("IDX", attName[], attValue[], varlist[])
   idxPtr = $num(string)
   if varptr > 0 then
      mapFlag[varptr] = "Y"
      copyptr = $varptr(temp[])
      (void)$copyvar(varptr, copyptr)
      control[varptr] = temp[]
   endif
   i = 0
   string = getAttVal("DCT", attName[], attValue[], varlist[])
   if string dp then
      tempnum = $num(string)
      (void)$dctload(tempNum, value[], label[])
      do while i++ < $maxarray(value[], label[])
         string = $uc(inputMap) + "-" + $uc(value[i]) + "-" + i
         $dropbox(control[varptr,idxPtr], label[i], value[i],,,string, string)
      enddo
   endif
goback

'-------------------------------------
' the uhp drop down list option tag
'-------------------------------------
_DROPBOXOPT:
   i++
   $clear(temp[])
   string = parentAtt[parentptr]
   getAtts(string, attName[], attValue[])
   getAtts(tagatts, label[], Value[])
   (void)$arrayMerge(attName[], label[])
   (void)$arrayMerge(attValue[], value[])
   temp[1] = getAttVal("VALUE", attName[], attValue[], varlist[])
   temp[2] = getAttVal("LABEL", attName[], attValue[], varlist[])
   string = $uc(inputMap) + "-" + $uc(temp[1]) + "-" + i
   $dropbox(control[varptr,idxptr], temp[2], temp[1],,,string,string)
goback

'-------------------------------------
' the uhp hidden block open tag
'-------------------------------------
_BLOCK:
   $clear(temp[])
   getAtts(tagatts, attName[], attValue[])
   temp[1] = getAttVal("UHP", attName[], attValue[], varlist[])
   temp[2] = getAttVal("VALUE", attName[], attValue[], varlist[])
   temp[3] = getAttval("IDX", attName[], attValue[], varlist[])
   if temp[3] !dp then
      string = getAttVal("DCT", attName[], attValue[], varlist[])
      if string dp then
         tempnum = $num(string)
         (void)$dctload(tempnum, value[])
         tempnum = $find(temp[2], value[], 1, "F")
         if tempnum > 0 then
            temp[3] = tempnum
         endif
      endif
   endif
   idxptr = $num(temp[3])
   varptr = findvar(temp[1], varList[])
   tempnum = $varptr(value[])
   (void)$copyvar(varptr, tempnum)
   if temp[2] = value[idxptr] then
      temp[4] = "block"
   else
      temp[4] = "none"
   endif
   if temp[3] !dp then
      temp[3] = "1"
   endif
   string = $uc(temp[1]) + "-" + $uc(temp[2]) + "-" + temp[3]
   string = "<div id='scrBlock" + string + string + "' style='display:" + temp[4] + "'>"
   $ctag(string)
goback

'-------------------------------------
' the uhp hidden block close tag
'-------------------------------------
_ENDBLOCK:
   $ctag("</div>")
goback

'-------------------------------------
' the uhp body tag
'-------------------------------------
_BODYTAG:
   'parse the tagatts
   $clear(temp[])
   getAtts(tagatts, attName[], attValue[])
   temp[1] = getAttVal("SUBMITOPT", attName[], attValue[], varlist[])
   temp[2] = getAttVal("SUBMITLABEL", attName[], attValue[], varlist[])
   temp[3] = getAttVal("CANCELOPT", attName[], attValue[], varlist[])
   temp[4] = getAttVal("CANCELLABEL", attName[], attValue[], varlist[])
   formname = getAttVal("NAME", attName[], attValue[], varlist[])
   if formname !dp then
      formname = $oper + $timenow
   endif
   if temp[1] !dp then
      temp[1] = "off"
   endif
   if temp[3] !dp then
      temp[3] = "off"
   endif
   if temp[2] !dp then
      temp[2] = "Submit"
   endif
   if temp[4] !dp then
      temp[4] = "Cancel"
   endif
   $submitopt(temp[1], temp[2])
   $cancelopt(temp[3], temp[4])
   $form(formName)
goback

'-------------------------------------
' the uhp textblock tag
'-------------------------------------
_TEXTBLOCK:
   $clear(temp[])
   getAtts(tagatts, attName[], attValue[])
   inputMap = getAttVal("UHP", attName[], attValue[], varlist[])
   if inputMap dp then
      varptr = findVar(attValue[i],varlist[])
      if varptr > 0 then
         mapFlag[varptr] = "Y"
         copyptr = $varptr(string)
         (void)$copyvar(varptr, copyptr)
         control[varptr] = string
      endif
   endif
   temp[1] = getAttVal("LABEL", attName[], attValue[], varlist[])
   temp[2] = getAttVal("COL", attName[], attValue[], varlist[])
   temp[3] = getAttVal("ROW", attName[], attValue[], varlist[])
   temp[4] = getAttVal("LIMIT", attName[], attValue[], varlist[])
   temp[5] = getAttVal("CLASS", attName[], attValue[], varlist[])
   if temp[5] dp then 
      temp[5] = "class='" + temp[5] + "'" 
   endif
   $text(temp[1])
   $textblock(control[varptr], $num(temp[3]), $num(temp[2]), temp[5],,$num(temp[4])) ', temp[2])
goback

'-------------------------------------
' the uhp literal tag
'-------------------------------------
_LITERAL:
   $clear(temp[], value[])
   getAtts(tagatts, attName[], attValue[])
   temp[1] = getAttVal("EDITTYPE", attName[], attValue[], varlist[])
   temp[2] = getAttVal("EDITNUM", attName[], attValue[], varlist[])
   temp[3] = getAttVal("VALUE", attName[], attValue[], varlist[])
   temp[4] = getAttVal("CLASS", attName[], attValue[], varlist[])
   temp[5] = getAttVal("OPTION", attName[], attValue[], varlist[])
   temp[6] = getAttVal("TYPE", attName[], attValue[], varlist[])
   varptr = findVar(temp[3], varlist[])
   if varptr > 0 then
      copyptr = $varptr(value[])
      (void)$copyvar(varptr,copyptr)
   else
      value[1] = temp[3]
   endif
   if temp[6] dp then
      temp[7] = "</" + temp[6] + ">"
      select $uc(temp[6])
         case "OL"
           or "UL"   temp[8] = "<li>"
                     temp[9] = "</li>"
      endselect
      temp[6] = "<" + temp[6] + ">"
      $ctag(temp[6])
   endif
   i = 0
   do while i++ < $maxarray(value[])
      string = value[i]
      select temp[1]
         case "DB"      (void)$dbalpha($num(temp[2]), string, string)
         case "DCT"     string = $dct($num(temp[2]), string, temp[5])
         case "DST"     (void)$dstinfo(temp[2], dstinfo[])
                        $setvarname(fakedst, temp[2])
                        $setvartype(fakedst, dstinfo[5])
                        if dstinfo[16] dp then     'this is a record dst
                           $setvarname(fakerecord, dstinfo[16])
                           (void)$dbread($num(dstinfo[4]), string, fakerecord, fakedst)
                        else
                           (void)$dbread($num(dstinfo[4]), string, fakedst)
                        endif
                        string = fakedst
      endselect
      if temp[8] dp then
         $ctag(temp[8])
      endif
      $text(string, temp[5])
      if temp[9] dp then
         $ctag(temp[9])
      endif
   enddo
   if temp[7] dp then
      $ctag(temp[7])
   endif
goback

'-------------------------------------
' the print button tag
'-------------------------------------
_PBUTTON:
   string = "<button type='button' class=sigbutton id=printbutton style='DISPLAY: block' "
   string += "onclick=window.print(); cmhcType='script' classSel='sigbutton' classNotSel='sigbutton'>"
   string += "Print</button>"
   $ctag(string)
   $ctag(pbutton)
%preload pbutton line-ending(cr)
<SCRIPT>
var prnPrintBtnDisp;
function window.onbeforeprint(){
   prnPrintBtnDisp=document.all.printbutton.style.display;
   document.all.printbutton.style.display="none";
   if(this.document.all.sessiontabs != null) this.document.all.sessiontabs.style.display='none';
   }
function window.onafterprint(){
   document.all.printbutton.style.display=prnPrintBtnDisp;
   if(this.document.all.sessiontabs != null) this.document.all.sessiontabs.style.display='block';
   try{reportOnafterprint();}
   catch(e){}}
</SCRIPT>
%endpreload
       
goback

'-------------------------------------
' the Snapshot tag
'-------------------------------------
_SNAPSHOT:
   $clear(temp[])
   getAtts(tagatts, attName[], attValue[])
   inputMap = getAttVal("UHP", attName[], attValue[], varlist[])
   temp[1] = getAttVal("TITLE", attName[], attValue[], varlist[])
   temp[2] = getAttVal("OPTION", attName[], attValue[], varlist[])
   temp[3] = getAttVal("PARMFILE", attName[], attValue[], varlist[])
   temp[4] = getAttVal("FORMID", attName[], attValue[], varlist[])
   temp[5] = getAttVal("REGID", attName[], attValue[], varlist[])
   varptr = findVar(temp[5], varlist[])
   if varptr > 0 then
      copyptr = $varptr(string)
      (void)$copyvar(varptr, copyptr)
      temp[5] = string
   endif
   temp[6] = getAttVal("DBNUM", attName[], attValue[], varlist[])
   if temp[4] dp then
      "l_snapLibMain":sn_CreateReport(temp[1], temp[2], temp[3], temp[4], temp[5], $num(temp[6]),,,,,$ScriptID) 
   endif
goback

'-------------------------------------
' the variable mapping routine
'-------------------------------------
_MAP:
   copyptr = $varptr(temp[])
   'varptr = 1
   varptr = $find("Y", mapFlag[], 1, "F")
   do while varptr > 0
      $clear(temp[])
      temp[] = control[varptr]
      (void)$copyvar(copyptr, varptr)
      varptr = $find("Y", mapFlag[], ++varptr, "F")
   enddo
goback

end uhp
'-------------------------------------
' support functions after this point
'-------------------------------------
' put uhp tag attributes and values 
' into arrays
'-------------------------------------
dynamic function getAtts(attString, name[], value[]) is null
attString   is x
name[]      is x
value[]     is x

attList[]   is x
i           is b
cnt         is b
wrapper     is x
$clear(name[], value[])
$allowupdate(name[], value[])
i = 0
do while i < $len(attString)
   name[++cnt] = $parse(attString, i, "=")
   name[cnt] = $trim(name[cnt])
   name[cnt] = $uc(name[cnt])
   attString = $seg(attString, i)
   attString = $trim(attString)
   i = 1
   wrapper = $charx(attString, i)
   value[cnt] = $parse(attString, ++i, wrapper)
enddo
end getAtts

'-------------------------------------
'Get the attribute value by attribute name.
' checks for overrides made by calling script
' according to <varname>.<attname> variable
' naming convention.
'-------------------------------------
dynamic function getAttVal(att, name[], value[], varlist[])[] is x
att      is x
name[]   is x
value[]  is x
varlist[]   is x

uhp      is x
temp[]   is x
i        is b
copyptr  is b
$clear(uhp, temp[], i , copyptr, getAttVal[])
$allowupdate(varlist[])
i = $find(att, name[], 1, "F")
if i > 0 then
   getAttVal[1] = value[i]
endif
i = $find("UHP", name[], 1, "F")
if i > 0 then
   do while i > 0
      uhp += value[i] + "."
      i = $find("UHP", name[], ++i, "F")
   enddo
   uhp += att
   i = findVar(uhp, varlist[])
   if i > 0 then
      copyptr = $varptr(temp[])
      (void)$copyvar(i,copyptr)
      if temp[] dp then
         if $uc(temp[]) = "NULL" then
            $clear(temp[])
         endif
         getAttVal[] = temp[]
      endif
   endif
endif
end getAttVal

      
'-------------------------------------
' return the variable pointer for var
' name
'-------------------------------------
dynamic function findVar(varname, varlist[]) is b
varname     is x
varlist[]   is x
varptr      is b
$allowupdate(varlist[])
varname = $uc(varname)
varptr = $find(varname, varlist[], 1, "F")
if varptr = 0 then
   varptr = $maxarray(varlist[])
endif
do while varlist[varptr] != varname
   (void)$getvar(++varptr,,,,varlist[varptr])
   if varlist[varptr] !dp then
      $clear(findvar)
      return
   endif
enddo
findvar = varptr
end findVar